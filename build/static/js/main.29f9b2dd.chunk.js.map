{"version":3,"sources":["components/AlertModal.js","components/SuccessModal.js","components/DisplayPath.js","components/TxPath.js","components/App.js","index.js"],"names":["AlertModal","open","toggle","children","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","SuccessModal","DisplayPath","txPaths","networkId","account","useState","msg","errorModal","setErrorModal","successModal","setSuccessModal","sendTxRequest","key","provider","signer","a","choosedPath","sendTransaction","from","transactions","to","data","tx","waitForTransaction","hash","message","validateAndSendTx","web3","window","ethereum","enable","ethers","providers","Web3Provider","getSigner","getChainId","utils","getAddress","style","width","map","element","length","fontSize","CardDeck","paddingBottom","k","Card","fontWeight","description","className","size","marginBottom","TxPath","ensAddress","accountAddress","amount","details","setDetails","setTxPaths","isProcessing","setIsProcessing","isRinkeby","setIsRinkeby","all","shortest","longest","showTx","setShowTx","txPathHandler","connect","org","chainId","app","intent","appIntent","address","constants","AddressZero","parseEther","paths","textAlign","Row","Col","Form","Check","inline","label","type","id","checked","onChange","Control","placeholder","e","target","value","required","role","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29f9b2dd.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function AlertModal({\n    open,\n    toggle,\n    children,\n}) {\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Opps!! Error...</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\"\n                    onClick={toggle}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function SuccessModal({\n    open,\n    toggle,\n    children,\n}) {\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Notification</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\"\n                    onClick={toggle}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React, { useState } from \"react\";\nimport { ethers } from 'ethers';\nimport {\n    Card,\n    CardDeck,\n    Button,\n} from \"react-bootstrap\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\n\nexport default function DisplayPath({\n    txPaths,\n    networkId,\n    account,\n}) {\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const sendTxRequest = async (key, provider, signer) => {\n        const choosedPath = txPaths[key];\n\n        try {\n            const tx = await signer.sendTransaction\n                ({\n                    from: choosedPath.transactions[0].from,\n                    to: choosedPath.transactions[0].to,\n                    data: choosedPath.transactions[0].data,\n                });\n\n            await provider.waitForTransaction(tx.hash);\n\n            setSuccessModal({\n                open: true,\n                msg: \"Congratulations !! \" +\n                    \"Your transaction request succesfully completed !!\",\n            });\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    };\n\n    const validateAndSendTx = async (key) => {\n        const web3 = window.ethereum;\n        await web3.enable();\n\n        const provider = new ethers.providers.Web3Provider(web3);\n        const signer = provider.getSigner();\n\n        if (networkId !== await signer.getChainId()) {\n            setErrorModal({\n                open: true,\n                msg: \"Incorrect network choosen !! Please choose correct network.\",\n            });\n        } else {\n            if (\n                await ethers.utils.getAddress(account) !== await signer.getAddress()\n            ) {\n                setErrorModal({\n                    open: true,\n                    msg: \"Incorrect signer choosen !! Please choose \" + account,\n                });\n            } else {\n                sendTxRequest(key, provider, signer);\n            }\n        }\n    };\n\n    return (\n        <div style={{ width: \"100%\" }}>\n            {txPaths.map((element, key) => (\n                <div>\n                    {txPaths.length > 1 ?\n                        <p style={{ fontSize: \"1.5rem\" }}><u>Path {key}</u></p>\n                        : null\n                    }\n                    <CardDeck key={key} style={{ paddingBottom: \"1%\" }}>\n                        {element.transactions.map((tx, k) => (\n                            <>\n                                <Card key={k}>\n                                    <Card.Header>{k + 1}</Card.Header>\n                                    <Card.Body>\n                                        <p style={{ fontWeight: \"bold\" }}>{tx.to}</p>\n                                        {tx.description}\n                                    </Card.Body>\n                                </Card>\n                                {k !== element.transactions.length - 1\n                                    ? <span className=\"right-arrow\">&#8594;</span>\n                                    : null\n                                }\n                            </>\n                        ))}\n                    </CardDeck>\n\n                    <Button\n                        onClick={() => validateAndSendTx(key)}\n                        variant=\"outline-success\"\n                        size=\"sm\"\n                        style={{ marginBottom: \"2%\" }}\n                    >\n                        Choose & Send\n                    </Button>\n                </div>\n            ))}\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({ ...errorModal, open: false })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({ ...successModal, open: false })}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport {\n    Row,\n    Button,\n    Card,\n    Col,\n    Form,\n} from \"react-bootstrap\";\n\nimport { ethers } from 'ethers';\nimport { connect } from '@aragon/connect-react';\nimport DisplayPath from \"./DisplayPath\";\nimport AlertModal from \"./AlertModal\";\n\nexport default function TxPath() {\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [details, setDetails] = useState({\n        ensAddress: \"\",\n        accountAddress: \"\",\n        amount: \"\",\n        message: \"\",\n    });\n    const [txPaths, setTxPaths] = useState([]);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [isRinkeby, setIsRinkeby] = useState(true);\n    const [showTx, setShowTx] = useState({\n        all: true,\n        shortest: false,\n        longest: false,\n    });\n\n    const txPathHandler = async () => {\n        try {\n            let org;\n            setIsProcessing(true);\n\n            if (!isRinkeby) {\n                org = await connect(details.ensAddress, 'thegraph')\n            } else {\n                org = await connect(details.ensAddress, 'thegraph', { chainId: 4 })\n            }\n\n            const app = await org.app('finance');\n\n            // Transaction intent\n            const intent = org.appIntent(app.address, 'newImmediatePayment', [\n                ethers.constants.AddressZero,\n                details.accountAddress,\n                ethers.utils.parseEther(details.amount),\n                details.message,\n            ])\n\n            // Transaction paths\n            const paths = await intent.paths(details.accountAddress);\n\n            setTxPaths(paths);\n            setIsProcessing(false);\n        } catch (error) {\n            setIsProcessing(false);\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const validateForm = () => {\n        if (details.accountAddress.length !== 42) {\n            setErrorModal({\n                open: true,\n                msg: \"Please enter valid account address !!\",\n            });\n        } else if (!details.ensAddress) {\n            setErrorModal({\n                open: true,\n                msg: \"All fields are mandatory !!\",\n            });\n        } else {\n            txPathHandler();\n        }\n    }\n\n    const handleClearStatus = () => {\n        setTxPaths([]);\n    }\n\n    return (\n        <div style={{ width: \"100%\" }}>\n            <Card className=\"mx-auto form-card \">\n                <Card.Header style={{ fontSize: \"2rem\" }}>\n                    PATH VISUALIZER\n                </Card.Header>\n\n                <Card.Body style={{ textAlign: \"left\" }}>\n                    <p\n                        style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n                    >\n                        <u>Transaction Path Visualizer for New Immediate Payment</u>\n                    </p>\n                    <Row>\n                        <Col>\n                            <div key={`inline-radio`} className=\"mb-3\">\n                                <Form.Check\n                                    inline\n                                    label=\"Rinkeby\"\n                                    type=\"radio\"\n                                    id={`inline-radio-1`}\n                                    checked={isRinkeby}\n                                    onChange={() => setIsRinkeby(true)}\n                                />\n                                <Form.Check\n                                    inline\n                                    label=\"Mainnet\"\n                                    type=\"radio\"\n                                    id={`inline-radio-2`}\n                                    checked={!isRinkeby}\n                                    onChange={() => setIsRinkeby(false)}\n                                />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Form.Control\n                                className=\"mb-4\"\n                                type=\"text\"\n                                placeholder=\"Organization ENS Address (eg: myorg.aragonid.eth)\"\n                                onChange={(e) => setDetails({\n                                    ...details,\n                                    ensAddress: e.target.value\n                                })}\n                                value={details.ensAddress}\n                                required\n                            />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Form.Control\n                                className=\"mb-4\"\n                                type=\"email\"\n                                placeholder=\"Ethereum address of signer\"\n                                onChange={(e) => setDetails({\n                                    ...details,\n                                    accountAddress: e.target.value\n                                })}\n                                value={details.accountAddress}\n                                required\n                            />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Form.Control\n                                className=\"mb-4\"\n                                type=\"number\"\n                                placeholder=\"Amount (eg: 1)\"\n                                onChange={(e) => setDetails({\n                                    ...details,\n                                    amount: e.target.value\n                                })}\n                                value={details.amount}\n                                required\n                            />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Form.Control\n                                className=\"mb-4\"\n                                type=\"text\"\n                                placeholder=\"Description Message\"\n                                onChange={(e) => setDetails({\n                                    ...details,\n                                    message: e.target.value\n                                })}\n                                value={details.message}\n                                required\n                            />\n                        </Col>\n                    </Row>\n                </Card.Body>\n\n                <Card.Footer className=\"text-center\">\n                    <Button\n                        onClick={validateForm}\n                        variant=\"outline-success\"\n                    >\n                        Get Paths\n                    </Button>\n                </Card.Footer>\n            </Card>\n\n            <Card className=\"mx-auto path-card\">\n                <Card.Header style={{ fontSize: \"1.5rem\" }}>\n                    Transaction Path\n                </Card.Header>\n\n                <Card.Body>\n                    {isProcessing ?\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                        :\n                        <div>\n                            {txPaths.length > 0 ?\n                                <div>\n                                    <div style={{ textAlign: \"right\", marginBottom: \"1%\" }} key={`tx-radio`}>\n                                        <span style={{ fontSize: \"1.1rem\" }}>Show Path: </span>\n                                        <Form.Check\n                                            inline\n                                            label=\"All\"\n                                            type=\"radio\"\n                                            id={`inline-radio-3`}\n                                            checked={showTx.all}\n                                            onChange={() => {\n                                                setShowTx({\n                                                    ...showTx,\n                                                    all: true,\n                                                    shortest: false,\n                                                    longest: false,\n                                                });\n                                            }}\n                                        />\n                                        <Form.Check\n                                            inline\n                                            label=\"Shortest\"\n                                            type=\"radio\"\n                                            id={`inline-radio-4`}\n                                            checked={showTx.shortest}\n                                            onChange={() => {\n                                                setShowTx({\n                                                    ...showTx,\n                                                    all: false,\n                                                    shortest: true,\n                                                    longest: false,\n                                                });\n                                            }}\n                                        />\n                                        <Form.Check\n                                            inline\n                                            label=\"Longest\"\n                                            type=\"radio\"\n                                            id={`inline-radio-5`}\n                                            checked={showTx.longest}\n                                            onChange={() => {\n                                                setShowTx({\n                                                    ...showTx,\n                                                    all: false,\n                                                    shortest: false,\n                                                    longest: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n\n                                    {showTx.all ?\n                                        <DisplayPath\n                                            txPaths={txPaths}\n                                            networkId={isRinkeby ? 4 : 1}\n                                            account={details.accountAddress}\n                                        />\n                                        : (\n                                            showTx.shortest\n                                                ?\n                                                <DisplayPath\n                                                    txPaths={[txPaths[0]]}\n                                                    networkId={isRinkeby ? 4 : 1}\n                                                    account={details.accountAddress}\n                                                />\n                                                :\n                                                <DisplayPath\n                                                    txPaths={[txPaths[txPaths.length - 1]]}\n                                                    networkId={isRinkeby ? 4 : 1}\n                                                    account={details.accountAddress}\n                                                />\n                                        )\n                                    }\n                                </div>\n                                : null\n                            }\n                        </div>\n                    }\n\n                </Card.Body>\n\n                <Card.Footer>\n                    <Button\n                        variant=\"warning\"\n                        onClick={handleClearStatus}\n                    >\n                        CLEAR\n                    </Button>\n                </Card.Footer>\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({ ...errorModal, open: false })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n        </div >\n    );\n}\n","import React from 'react';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport TxPath from './TxPath';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TxPath />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}